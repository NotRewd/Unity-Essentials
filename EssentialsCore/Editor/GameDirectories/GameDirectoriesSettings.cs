using System.IO;
using System.Linq;
using System.Text;
using Essentials.Core.GameDirectories;
using Essentials.Core.Utility;
using UnityEditor;
using UnityEngine;

namespace Essentials.Internal.GameDirectories
{
    public static class GameDirectoriesSettings
    {
        private const string SAVE_KEY = "Essentials.GameDirectoriesSettingsData";

        private static GameDirectoriesSettingsData settingsData;

        public static void LoadData()
        {
            if (settingsData != null) return;

            int hash = Application.dataPath.GetHashCode();
            
            settingsData = EditorPrefs.HasKey($"{SAVE_KEY}.{hash:X}") ? JsonUtility.FromJson<GameDirectoriesSettingsData>(EditorPrefs.GetString($"{SAVE_KEY}.{hash:X}")) : new GameDirectoriesSettingsData();
        }

        public static void SaveData()
        {
            int hash = Application.dataPath.GetHashCode();

            EditorPrefs.SetString($"{SAVE_KEY}.{hash:X}", JsonUtility.ToJson(settingsData));
        }

        public static string GetClassName() => settingsData.className;
        public static string GetClassLocation() => settingsData.classLocation;
        public static GameDirectoryData[] GetGameDirectoriesData() => JsonUtility.FromJson<Wrapper<GameDirectoryData>>(settingsData.gameDirectoriesData).items;

        public static void SetClassName(string className) => settingsData.className = className;
        public static void SetClassLocation(string classLocation) => settingsData.classLocation = classLocation;
        public static void SetGameDirectoriesData(GameDirectoryData[] directories)
        {
            Wrapper<GameDirectoryData> wrapper = new Wrapper<GameDirectoryData>();
            wrapper.items = directories;
            settingsData.gameDirectoriesData = JsonUtility.ToJson(wrapper);
        }

        public static void GenerateClass(GameDirectory[] directories)
        {
            string className = GetClassName();
            string classLocation = GetClassLocation();

            StringBuilder stringBuilder = new StringBuilder();

            stringBuilder.AppendLine("// This file was automatically generated by Essentials Game Directories");
            stringBuilder.AppendLine("using System.IO;");
            stringBuilder.AppendLine("using UnityEngine;");
            stringBuilder.AppendLine();
            stringBuilder.AppendLine("namespace Essentials.Core.GameDirectories");
            stringBuilder.AppendLine("{");
            stringBuilder.AppendLine($"\tpublic static class {className}");
            stringBuilder.AppendLine("\t{");

            foreach (GameDirectory directory in directories)
            {
                if (string.IsNullOrEmpty(directory.reference)) continue;

                stringBuilder.AppendLine($"\t\tpublic static string {directory.reference}");
                stringBuilder.AppendLine("\t\t{");
                stringBuilder.AppendLine("\t\t\tget");
                stringBuilder.AppendLine("\t\t\t{");
                stringBuilder.AppendLine($"\t\t\t\tstring path = Path.Combine(Application.persistentDataPath, {string.Join(", ", directory.path.Split("/").Select(x => $"\"{x}\""))});");
                stringBuilder.AppendLine("\t\t\t\tif (!Directory.Exists(path)) Directory.CreateDirectory(path);");
                stringBuilder.AppendLine("\t\t\t\treturn path;");
                stringBuilder.AppendLine("\t\t\t}");
                stringBuilder.AppendLine("\t\t}");
            }

            stringBuilder.AppendLine("\t}");
            stringBuilder.AppendLine("}");

            string classPath = $"{Path.Combine(classLocation, className)}.cs";

            if (AssetDatabase.LoadAssetAtPath<MonoScript>(classPath) != null) AssetDatabase.DeleteAsset(classPath);

            StreamWriter streamWriter = new StreamWriter(Application.dataPath + classPath[6..]);
            streamWriter.Write(stringBuilder.ToString());
            streamWriter.Close();

            AssetDatabase.Refresh();
        }
    }
}